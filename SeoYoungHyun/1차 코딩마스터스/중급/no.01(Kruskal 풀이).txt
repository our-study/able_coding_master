import sys
input = sys.stdin.read
data = input().split()


def kruskal(n, edges):
    parent = list(range(n))
    rank = [0] * n
    
    edges.sort()
    
    mst_cost = 0
    mst_edges = 0
    
    for cost, u, v in edges:
        if find(parent, u) != find(parent, v):
            union(parent, rank, u, v)
            mst_cost += cost
            mst_edges += 1
            if mst_edges == n - 1:
                break
    
    return mst_cost
    
def find(parent, i):
    if parent[i] == i:
        return i
    else:
        parent[i] = find(parent, parent[i])
        return parent[i]

def union(parent, rank, x, y):
    rootX = find(parent, x)
    rootY = find(parent, y)
    
    if rootX != rootY:
        if rank[rootX] > rank[rootY]:
            parent[rootY] = rootX
        elif rank[rootX] < rank[rootY]:
            parent[rootX] = rootY
        else:
            parent[rootY] = rootX
            rank[rootX] += 1

N = int(data[0])
M = int(data[1])

edges = []
index = 2

for _ in range(M):
    a = int(data[index]) - 1
    b = int(data[index + 1]) - 1
    c = int(data[index + 2])
    edges.append((c, a, b))
    index += 3

print(kruskal(N, edges))



// 이번문제같은경우는 크루스칼 알고리즘 최소신장 트리를 이용하여 문제를 풀었습니다.
