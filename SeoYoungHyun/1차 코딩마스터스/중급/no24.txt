import numpy as np
# DP문제로 좀더 고민해보기...
def count_password_cases(N, times):
    MOD = 1000000007
    
    buttons = {
        1: (0, 0), 2: (0, 1), 3: (0, 2),
        4: (1, 0), 5: (1, 1), 6: (1, 2),
        7: (2, 0), 8: (2, 1), 9: (2, 2)
    }
    
    def calculate_time(pos1, pos2):
        if pos1 == pos2:
            return 1
        elif abs(pos1[0] - pos2[0]) <= 1 and abs(pos1[1] - pos2[1]) <= 1:
            return 2
        else:
            return 3

    time_matrix = np.zeros((10, 10), dtype=int)
    for i in range(1, 10):
        for j in range(1, 10):
            time_matrix[i][j] = calculate_time(buttons[i], buttons[j])
    
    dp = [[0] * 10 for _ in range(N)]
    
    for button in range(1, 10):
        dp[0][button] = 1
    
    for i in range(1, N):
        for curr_button in range(1, 10):
            for prev_button in range(1, 10):
                if time_matrix[prev_button][curr_button] == times[i-1]:
                    dp[i][curr_button] = (dp[i][curr_button] + dp[i-1][prev_button]) % MOD

    result = sum(dp[N-1]) % MOD
    return result

N = int(input())
times = list(map(int, input().split()))

print(count_password_cases(N, times))