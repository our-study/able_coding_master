import itertools
from collections import deque

directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]


def my_def(a_list, N, M):
    empty_spaces = [(i, j) for i in range(N) for j in range(M) if a_list[i][j] == 0]
    max_safe = 0
    
    for walls in itertools.combinations(empty_spaces, 3):
        new_zoo = [row[:] for row in a_list]
        for x, y in walls:
            new_zoo[x][y] = 1
        bfs(new_zoo, N, M)
        safe_count = test(new_zoo, N, M)
        max_safe = max(max_safe, safe_count)
    
    return max_safe
    
    
    
    
    
def bfs(zoo, N, M):
    queue = deque()
    for i in range(N):
        for j in range(M):
            if zoo[i][j] == 2:
                queue.append((i, j))
    
    while queue:
        x, y = queue.popleft()
        
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < N and 0 <= ny < M and zoo[nx][ny] == 0:
                zoo[nx][ny] = 2
                queue.append((nx, ny))


def test(zoo, N, M):
    safe_count = 0
    for i in range(N):
        for j in range(M):
            if zoo[i][j] == 0:
                safe_count += 1
    return safe_count

N, M = map(int, input().split())

a_list = []
for _ in range(N):
    row = list(map(int, input().split()))
    a_list.append(row)

print(my_def(a_list, N, M))
