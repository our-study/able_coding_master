from collections import defaultdict, deque

def is_bipartite(graph, v):
    color = [-1] * (v + 1)

    for start in range(1, v + 1):
        if color[start] == -1:
            queue = deque([start])
            color[start] = 0

            while queue:
                node = queue.popleft()
                
                for neighbor in graph[node]:
                    if color[neighbor] == -1:
                        color[neighbor] = 1 - color[node]
                        queue.append(neighbor)
                    elif color[neighbor] == color[node]:
                        return False

    return True

v, e = map(int, input().split())
graph = defaultdict(list)

for _ in range(e):
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)

if is_bipartite(graph, v):
    print(1)
else:
    print(0)
