- 투 포인터

  - 투 포인터 이동 원칙
    sum > N: sum = sum - start_index; start_index++;
    sun < N: end_index++; sum = sum + end_index;
    sum == N: end_index++; sum = sum +end_index; count++;

- 연습문제 -
  연속된 자연수의 합 구하기  (난이도: 실버 5)
  주몽의 명령                (난이도: 실버 4)

- 슬라이딩 원도우

  투 포인터 알고리즘과 매우 비슷함

- 연습문제 -
  DNA비밀번호                (난이도: 실버 5)
  

- 스택과 큐

   - 파이썬의 스택
   스택은 깊이 우선 탐색, 후입선출은 개념 자체가 재귀 함수 알고리즘 원리와 일맥상 통함
   
     - 연산
     s.append(data): top 위치에 새로운 데이터를 삽입하는 연산이다.
     s.pop: top 위치에 현재 있는 데이터를 삭제하고 확인하는 연산이다.
     s[-1]: top 위치에 현재 있는 데이터를 단순 확인하는 연산이다.


    - 파이썬의 큐
    큐는 너비 우선 탐색, 선입선출로 양방향으로 삽입과 삭제가 이루어짐
    
    - 위치
    rear: 큐에서 가장 끝 데이터를 가리키는 영역
    front: 큐에서 가장 앞의 데이터를 가리키는 영역
    
    - 연산
    s.append(data): rear 부분에 새로운 데이터를 삽입하는 연산이다.
    s.popleft(): front부분에 있는 데이터를 삭제하고 확인하는 연산이다.
    s[0]: 큐의 맨 앞(front)에 있는 데이터를 확인할 때 사용하는 연산이다.

- 연습문제 -
  스택으로 수열 만들기        (난이도: 실버 3)
  
- 버블 정렬

  - 버블 정렬의 핵심 이론
  버블 정렬은 두 인접한 데이터의 크기를 비교해 정렬하는 방법입니다.
  루프를 돌면서 인접한 데이터 간의 swap 연산으로 정렬합니다.

  - 버블 정렬 과정
  1. 비교 연산이 필요한 루프 범위를 설정한다.
  2. 인접한 데이터 값을 비교한다.
  3. swap 조건에 부합하면 swap 연산을 수행한다.
  4. 루프 범위가 끝날 때까지 2~3을 반복한다.
  5. 정렬 영역을 설정한다. 다음 루프를 실행할 때는 이 영역을 제외한다.
  6. 비교 대상이 없을 때까지 1~5를 반복한다.

- 연습문제 -
  수 정렬하기 1                (난이도: 브론즈 1)

- 선택 정렬
  - 선택 정렬의 핵심 이론
  최솟값 또는 최댓값을 찾고, 남은 정렬 부분의 가장 앞에 있는 데이터와 swap하는 것이 선택 정렬의 핵심입니다.

  - 선택 정렬 과정
  1. 남은 정렬 부분에서 최솟값 또는 최댓값을 찾는다.
  2. 남은 정렬 부분에서 가장 앞에 있는 데이터와 선택된 데이터를 swap한다.
  3. 가장 앞에 있는 데이터의 위치를 변경해(index++) 남은 정렬 부분의 범위를 축소한다.
  4. 전체 데이터 크기만큼 index가 커질 때까지, 즉 남은 정렬 부분이 없을 때까지 반복한다.

- 연습문제 -
  내림차순으로 자릿수 정렬하기   (난이도: 실버 4)
